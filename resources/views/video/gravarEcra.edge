@layout('layouts/dasboard')

@section('master')

<style>
  video {
    margin-top: -14px;
    width: 110%;
    
    border-radius: 9px;
    border: 5px solid white;
  }
 
}

</style>

<div class="row">
  @if(flashMessages.has('msg'))
  <div class="col-md-12">
    <div class="alert alert-success alert-dismissible fade show" role="alert">
    <b>{{ flashMessages.get('msg') }}</b>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <i class="ik ik-x"></i>
  </button>
    </div>
  </div>
  @endif

  <div class="col-md-12">

  <div class="card" style="background-color: #fff" >

       <div class="card-header" ><h3>Telas de placas</h3></div>
          
          <div class="card-body template-demo" style="display: flex; flex-wrap: wrap; justify-content: center;">
             @each(pl in placa)
                
                 <!--<label for="exampleInputUsername2" class="col-sm-2 col-form-label">Ecra (Opções)</label>-->
                 <div class="col-sm-4" data-toggle="modal" data-target="#exampleModalCenter">
                    <div style="color:#000;"><h6>{{pl.nome}}</h6></div>
                    <video controls autoplay  playsinline id={{pl.id}} placeholder={{pl.nome}}></video> <br><br>
                 </div>
             @endeach
          </div>

            
            <!--<button id="download" class="btn  btn-success" disabled>Salvar</button> -->
          </div>  
         
        </div>
 
    </div>  
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
           <div class="modal-content" style="background-color:transparent; border: transparent">
              
                <video style="width: 150%"controls autoplay  playsinline ></video>
          
              <div class="modal-footer" style="width: 110%">
                <button id="btn-start-recordingt" class="btn btn-primary" onclick=" inciarGravacao()">Inciar Gravação</button>
                <button id="btn-stop-recording" class="btn btn-info" disabled>Stop e Salvar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
             </div>
      </div>
  </div>
  </div>  
<script>
  
    var video = document.querySelector('video');
    var btnStartRecording =document.getElementById('btn-start-recording');
    var btnStopRecording = document.getElementById('btn-stop-recording');

    function invokeGetDisplayMedia(success, error) {
    var displaymediastreamconstraints = {
      video: {
        displaySurface: 'monitor', // monitor, window, application, browser
        logicalSurface: true,
        cursor: 'always', // never, always, motion
       
      },
      audio: true
    };

    // that's why overriding them
    displaymediastreamconstraints = {
      video: true,
      audio: true, 
    };

    if (navigator.mediaDevices.getDisplayMedia) {
      navigator.mediaDevices.getDisplayMedia(displaymediastreamconstraints).then(success).catch(error);
    } else {
      navigator.getDisplayMedia(displaymediastreamconstraints).then(success).catch(error);
    }
  }


  function captureScreen(callback) {
    invokeGetDisplayMedia(function(screen) {
      addStreamStopListener(screen, function() {
       
        document.getElementById('btn-stop-recording').click();
      });
      callback(screen);
    }, function(error) {
      console.error(error);
      alert('Unable to capture your screen. Please check console logs.\n' + error);
    });
  }

  function stopRecordingCallback() {
    video.src = video.srcObject = null;
    //const x = recorder.getBlob();
    //video.src = URL.createObjectURL(x);
    salavarGravacao()
    //console.log(invokeSaveAsDialog(recorder.getBlob(), new Date().toUTCString()+'.mp4'));
   // video.src = URL.createObjectURLrecorder.getBlob());
    
    recorder.screen.stop();
    recorder.destroy();
    recorder = null;
    
  }

 

  var recorder;  // globally
  
  function inciarGravacao() {
    this.disabled = true;
    //console.log($('#id-ecra').val());

    captureScreen(function(screen) {
      video.srcObject = screen;

      recorder = RecordRTC(screen, {
        type: 'video',
      });

      recorder.startRecording();
      recorder.screen = screen;
      document.getElementById('btn-stop-recording').disabled = false;
    });
  }

  document.getElementById('btn-stop-recording').onclick = function() {
    this.disabled = true;
    recorder.stopRecording(stopRecordingCallback);
    
  };
  
function salavarGravacao(){

const formData = new FormData();
const xhr = new XMLHttpRequest();
const date = new Date()
const nome = date.toISOString().substr(0,10)+'-'+date.toTimeString().substr(0,8)+'.mp4';
const fileVideo = new File([recorder.getBlob()], nome, {type: 'video/mp4'});

formData.append('video-blob', fileVideo);
formData.append('video-filename', fileVideo.name);
formData.append('titulo', nome);

xhr.open('POST', '/salvar/ecra');
xhr.send(formData);


}
  function addStreamStopListener(stream, callback) {
    stream.addEventListener('ended', function() {
      callback();
      callback = function() {};
    }, false);
    stream.addEventListener('inactive', function() {
      callback();
      callback = function() {};
    }, false);
    stream.getTracks().forEach(function(track) {
      track.addEventListener('ended', function() {
        callback();
        callback = function() {};
      }, false);
      track.addEventListener('inactive', function() {
        callback();
        callback = function() {};
      }, false);
    });
  }

</script>

@endsection