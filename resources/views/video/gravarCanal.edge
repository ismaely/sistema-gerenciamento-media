@layout('layouts/dasboard')

@section('master')
<script src="../js/record-rtc/DetectRTC.js"></script>
<style>
  video {
    margin-top: -7px;
    width: 100%;
    border-radius: 9px;
    border: 1px solid black;
    background-color: #000;
  }
</style>


<div class="row">
  @if(flashMessages.has('msg'))
  <div class="col-md-12">
    <div class="alert alert-success alert-dismissible fade show" role="alert">
    <b>{{ flashMessages.get('msg') }}</b>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <i class="ik ik-x"></i>
  </button>
    </div>
  </div>
  @endif

  <div class="col-md-12">

  <div class="card" style="background-color: #fff" >

       <div class="card-header" ><h3>Ambiente de gravação dos canais</h3></div>
          
          <div class="card-body template-demo" style="display: flex; flex-wrap: wrap; justify-content: center;">
             @each(dados in placa)
                
                 <!--<label for="exampleInputUsername2" class="col-sm-2 col-form-label">Ecra (Opções)</label>-->
                 <div class="col-sm-4" data-toggle="modal" data-target="#exampleModalCenter"   id={{dados.nome}}>
                    <div style="color:#000;"><h6>{{dados.nome}}</h6></div>
                    <video controls autoplay  playsinline id="canal" ></video> <br><br>
                 </div>
                
             @endeach
          </div>

          <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                 <div class="modal-content" style="background-color:transparent; border: transparent">
                      <video style="width: 150%"controls autoplay  playsinline ></video>
                
                      <div class="modal-footer" style="width: 110%">
                        <button id="start" class="btn btn-primary">Ligar a camera</button>  
                        <button id="record" class="btn btn-info" disabled>Gravar</button>
                        <button id="download" class="btn  btn-success" data-toggle="modal" data-target="#exampleModalCenter" disabled>Guardar</button> 
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                     </div>
            </div>
        </div>
        </div> 
            <!--<button id="download" class="btn  btn-success" disabled>Salvar</button> -->
          </div>  
         
        </div>
 
    </div>  
     

  <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterLabel">Titulo do Video</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <form class="forms-sample" action="{{ route('VideosController.salvarVideo') }}" method="POST" enctype="multipart/form-data">
            <div class="modal-body">
              <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Titulo" required>
              
            </div>
           
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
              
                <button type="submit" id="enviar" class="btn btn-primary" >Enviar</button>
               
            </div>
            </form>
        </div>
    </div>
  </div>

<script>
  var allCameraStreams = [];

function captureAllCameras(callback) {
  var streams = [];
  var donotDuplicateDevices = {};

  DetectRTC.videoInputDevices.forEach(function(device, idx) {
    navigator.mediaDevices.getUserMedia({
      video: {
        mandatory: {},
        optional: [{
          sourceId: device.id
        }]
      }
    }).then(function(stream) {
      if (!donotDuplicateDevices[device.id]) {
        donotDuplicateDevices[device.id] = true;

        streams.push(stream);
      }

      allCameraStreams.push(stream);

      if (idx == DetectRTC.videoInputDevices.length - 1) {
        callback(streams);
      }
    }).catch(function(e) {
      console.error(e);
    });
  })
}

var video = document.querySelector('video');

var timeout = 10; // 10 seconds

DetectRTC.load(function() {
  captureAllCameras(function(streams) {
    if (streams.length == 1) {
      streams.push(streams[0]);
    }

    var recorder = RecordRTC(streams, {
      type: 'video',
      mimeType: 'video/webm',
      previewStream: function(s) {
        video.muted = true;
        video.srcObject = s;
      }
    });

    recorder.startRecording();

    // MediaRecorder API does not allows adding more streams whilst recording is ACTIVE
    false && setTimeout(function() {
      // append audio stream after 2 seconds
      navigator.mediaDevices.getUserMedia({
        audio: true
      }).then(function(mic) {
        let mixer = recorder.getInternalRecorder().getMixer();
        mixer.appendStreams([mic]);
        video.srcObject = mixer.getMixedStream();
        allCameraStreams.push(mic);
      });
    }, 2000);

    (function looper() {
      timeout--;

      if (timeout > 0) {
        setTimeout(looper, 1000);
        return;
      }

      recorder.stopRecording(function() {
        var blob = recorder.getBlob();

        video.muted = false;

        allCameraStreams.forEach(function(stream) {
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
        });

        video.srcObject = null;
        video.src = URL.createObjectURL(blob);
      });
    })();
  });
});


</script>



@endsection